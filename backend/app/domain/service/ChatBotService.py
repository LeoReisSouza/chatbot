import os
from anthropic import Anthropic
from dotenv import load_dotenv
from backend.config import IDENTITY, TOOLS, MODEL, get_quote
import psycopg2

load_dotenv()

class ChatBot:
    """
    Esta classe é responsável por realizar as comunicações com a API da Anthropic,
    que é responsável pela comunicação com o nosso serviço de LLM.
    """
    def __init__(self, session_state):
        self.anthropic = Anthropic(api_key=os.getenv("HAIKU_API_KEY"))
        self.session_state = session_state
        self.db_connection = self.connect_to_db()

    def connect_to_db(self):
        """
        Establishes a connection to the PostgreSQL database.
        """
        try:
            connection = psycopg2.connect(
                dbname=os.getenv("DB_NAME"),
                user=os.getenv("DB_USER"),
                password=os.getenv("DB_PASSWORD"),
                host=os.getenv("DB_HOST"),
                port=os.getenv("DB_PORT")
            )
            return connection
        except Exception as e:
            print(f"Failed to connect to PostgreSQL database: {e}")
            return None

    def generate_message(
        self,
        messages,
        max_tokens,
    ):
        """
        Cria as mensagens que serão enviadas para o modelo de LLM.

        Arguments:
            messages (str): mensagens que serão utilizadas como padrão e prompt.
            max_tokens (num): máximo de tokens que serão utilizados para a mensagem.

        Return:
            response (dict): mensagem de resposta da API para a criação da mensagem.

        Exception:
            e (str): mensagem de erro capturada pela Exception.
        """
        try:
            response = self.anthropic.messages.create(
                model="anthropic.claude-3-haiku-20240307-v1:0",
                system=IDENTITY,
                max_tokens=max_tokens,
                messages=messages,
                tools=TOOLS,
            )
            return response
        except Exception as e:
            return {"error": str(e)}

    def process_user_input(self, user_input):
        """
        Processes the user input and generates an SQL query.
        """
        self.session_state.messages.append({"role": "user", "content": user_input})

        # Call LLM API to generate SQL query based on user input
        response_message = self.generate_message(
            messages=self.session_state.messages,
            max_tokens=1024,
        )

        if "error" in response_message:
            return f"An error occurred: {response_message['error']}"

        if response_message.content[-1].type == "text":
            # Extract SQL query from the response
            sql_query = response_message.content[0].text.strip()
            try:
                result = self.execute_sql_query(sql_query)
                return result
            except Exception as e:
                return f"Failed to execute query: {e}"
        else:
            raise Exception("An error occurred: Unexpected response type")

    def execute_sql_query(self, query):
        """
        Executes the SQL query generated by the chatbot using PostgreSQL.
        """
        try:
            with self.db_connection.cursor() as cursor:
                cursor.execute(query)
                result = cursor.fetchall()  # Fetch all results
                return result
        except Exception as e:
            return f"An error occurred during SQL execution: {e}"

    def handle_tool_use(self, func_name, func_params):
        """
        Realiza o processamento do input do usuário.

        Arguments:
            func_name (str): input inserido pelo usuário.
            func_params (str): input inserido pelo usuário.

        Return:
            response_message (dict): mensagem de resposta tratada e gerada à partir 
            do input do usuário.

        Exception:
            e (str): mensagem de erro capturada pela Exception.
        """
        if func_name == "get_quote":
            premium = get_quote(**func_params)
            return f"Quote generated: ${premium:.2f} per month"
        
        raise Exception("An unexpected tool was used")
